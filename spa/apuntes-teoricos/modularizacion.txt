********************************************************************************
10/05/2023   

                       **** MODULARACIÓN ****
    La progmación modular es la division de la solución en módulos.
Es decir, ante un problema complejo, es convienente poder divirlo, en módulos de
programación. La estrategia es descomponer la solución en subsolución. Tener
sub-programas o sub-algoritmos, tienen como tarea un objetivo más específico
que deberán resolver.
    ¿Hasta que nivel iremos dividiendo? Hasta un nivel donde no sea necesario seguir 
dividiendolo, e irá variando de alumno en alumno.
    Una metodología de diseño es identificar las subtareas para armar los 
distintos módulos. Antes de comenzar a trabajar, intentar identificar las 
subtareas.
    Esos módulos luego deben ser nuevamente descompuestos, constituyendo así
la programación por refinamiento.

El problema se resuelve con el programa.
Los módulos se resuelven con los subprogramas.

Los subprogramas está compuestos por procedimientos y funciones.
Cuando la función no devuelve un resultado, es un procedimiento.
Cuando si devuleve un resultado es una función. Pero es un abuso del lenguaje
que usamos en el C.

El conjunto de datos que se envía como comunicación entre las unidades de 
programa recibe el nombre de PARÁMETROS.

Las variables que se declaren en módulo principal las declaramos al principio.
Pero aquellas variables que solo tienen sentido en contexto de ejecución del 
procedimiento deben ser declaradas dentro del procedimiento.

No hay que pensar en las variables, hay que pensar en las acciones ,
y las acciones me definen las variables que voy a necesitar.

En teoría siempre una función va a recibir parametros por función o por copia.
Los de copia no necesitan ser modificados en si mismos.
Varias de las cosas que está mostrando, solo se aplican al pseudocodigo, porque 
los lenguajes por cuestiones de codificacione no lo aplican.

Cada vez que se inicia un conjunto de código o modulo, sigue estando en memoria, 
pero en el momento que se llama a otro modulo, pasa a estar en espera, sigue 
estando en memoria, pero espera, es decir,no ejecutandose.

En memoria tenemos código y los datos.

De manera estricta es conveniente que coincidan las cantidades de variables
formales y las reales.
Cuando las 2 rutinas no tienen la misma cabeza, entra en juego armar una buena 
documentación para evitar ambigüedades y poder mantener el código.

Regla de correspondencia entre parámetros....


Tipos de parámetros:
    De entrada
    De salida
    De entrada / salida
Todo esto entra en juego en el momento de realizar la llamada.
